{
	"info": {
		"_postman_id": "46fec69b-a56d-4d8e-becd-1ff2c96f9c78",
		"name": "final_project",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Read users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/users",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read users: wrong method",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"405 status code\", function () {\r",
							"    pm.response.to.have.status(405);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Request method not allowed.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PATCH",
				"header": [],
				"url": {
					"raw": "{{app_url}}/users",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a boat: no JWT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function() {\r",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No token.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Black Pearl\",\r\n    \"type\": \"Galleon\",\r\n    \"length\": 165\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a boat: invalid JWT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "123",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Black Pearl\",\r\n    \"type\": \"Galleon\",\r\n    \"length\": 165\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a boat: invalid request body",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function() {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function() {\r",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Invalid request body.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": 123\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a boat: invalid requested mimetype",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"406 status code\", function() {\r",
							"    pm.response.to.have.status(406);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function() {\r",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Invalid requested media type.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "text/html",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a boat 1: jwt1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"boat_id1\", pm.response.json()[\"id\"]);\r",
							"\r",
							"pm.test(\"201 status code\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function(){\r",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Black Pearl\");\r",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Galleon\");\r",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(165);\r",
							"    pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"user_id1\"));\r",
							"    pm.expect(pm.response.json()[\"alliance\"]).is.oneOf([null, undefined]);\r",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];\r",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Black Pearl\",\r\n    \"type\": \"Galleon\",\r\n    \"length\": 165\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a boat 2: jwt1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"boat_id2\", pm.response.json()[\"id\"]);\r",
							"\r",
							"pm.test(\"201 status code\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function(){\r",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"White Pearl\");\r",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Galleon\");\r",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(165);\r",
							"    pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"user_id1\"));\r",
							"    pm.expect(pm.response.json()[\"alliance\"]).is.oneOf([null, undefined]);\r",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];\r",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"White Pearl\",\r\n    \"type\": \"Galleon\",\r\n    \"length\": 165\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a boat 3: jwt1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"boat_id3\", pm.response.json()[\"id\"]);\r",
							"\r",
							"pm.test(\"201 status code\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function(){\r",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Red Pearl\");\r",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Galleon\");\r",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(165);\r",
							"    pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"user_id1\"));\r",
							"    pm.expect(pm.response.json()[\"alliance\"]).is.oneOf([null, undefined]);\r",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];\r",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Red Pearl\",\r\n    \"type\": \"Galleon\",\r\n    \"length\": 165\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a boat 4: jwt1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"boat_id4\", pm.response.json()[\"id\"]);\r",
							"\r",
							"pm.test(\"201 status code\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function(){\r",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Blue Pearl\");\r",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Galleon\");\r",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(165);\r",
							"    pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"user_id1\"));\r",
							"    pm.expect(pm.response.json()[\"alliance\"]).is.oneOf([null, undefined]);\r",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];\r",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Blue Pearl\",\r\n    \"type\": \"Galleon\",\r\n    \"length\": 165\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a boat 5: jwt1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"boat_id5\", pm.response.json()[\"id\"]);\r",
							"\r",
							"pm.test(\"201 status code\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function(){\r",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Yellow Pearl\");\r",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Galleon\");\r",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(165);\r",
							"    pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"user_id1\"));\r",
							"    pm.expect(pm.response.json()[\"alliance\"]).is.oneOf([null, undefined]);\r",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];\r",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Yellow Pearl\",\r\n    \"type\": \"Galleon\",\r\n    \"length\": 165\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a boat 6: jwt1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"boat_id6\", pm.response.json()[\"id\"]);\r",
							"\r",
							"pm.test(\"201 status code\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function(){\r",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Green Pearl\");\r",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Galleon\");\r",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(165);\r",
							"    pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"user_id1\"));\r",
							"    pm.expect(pm.response.json()[\"alliance\"]).is.oneOf([null, undefined]);\r",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];\r",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Green Pearl\",\r\n    \"type\": \"Galleon\",\r\n    \"length\": 165\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a boat 1: jwt2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"boat_id001\", pm.response.json()[\"id\"]);\r",
							"\r",
							"pm.test(\"201 status code\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function(){\r",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Orange Pearl\");\r",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Galleon\");\r",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(165);\r",
							"    pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"user_id2\"));\r",
							"    pm.expect(pm.response.json()[\"alliance\"]).is.oneOf([null, undefined]);\r",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];\r",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Orange Pearl\",\r\n    \"type\": \"Galleon\",\r\n    \"length\": 165\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read user1's boats: no JWT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read user1's boats: invalid JWT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "123",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read user1's boats: invalid requested mimetype",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"406 status code\", function() {\r",
							"    pm.response.to.have.status(406);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function() {\r",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Invalid requested media type.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "text/html",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read user1's boats: 1st page",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function() {\r",
							"    pm.expect(pm.response.json()[\"boats\"].length).to.eq(5);\r",
							"    pm.expect(pm.response.json()[\"total_number\"]).to.eq(6);\r",
							"});\r",
							"\r",
							"pm.test(\"next property exists\", function () {\r",
							"    pm.expect(pm.response.json()[\"next\"]).is.not.oneOf([null, undefined]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read user1's boats: 2nd page",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function() {\r",
							"    pm.expect(pm.response.json()[\"boats\"].length).to.eq(1);\r",
							"    pm.expect(pm.response.json()[\"total_number\"]).to.eq(6);\r",
							"});\r",
							"\r",
							"pm.test(\"next property not exist\", function () {\r",
							"    pm.expect(pm.response.json()[\"next\"]).is.oneOf([null, undefined]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats?limit=5&offset=5",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					],
					"query": [
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "offset",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Read user2's boats",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function() {\r",
							"    pm.expect(pm.response.json()[\"boats\"].length).to.eq(1);\r",
							"    pm.expect(pm.response.json()[\"total_number\"]).to.eq(1);\r",
							"});\r",
							"\r",
							"pm.test(\"next property not exist\", function () {\r",
							"    pm.expect(pm.response.json()[\"next\"]).is.oneOf([null, undefined]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a boat: wrong method",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"405 status code\", function () {\r",
							"    pm.response.to.have.status(405);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Request method not allowed.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Orange Pearl\",\r\n    \"type\": \"Galleon\",\r\n    \"length\": 165\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read boat 1: no JWT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function() {\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function() {\r",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No token.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read boat 1: invalid JWT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function() {\r",
							"    pm.response.to.have.status(401);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "123",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read boat 1: wrong owner",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function() {\r",
							"    pm.response.to.have.status(403);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function() {\r",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Not your boat.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read boat 1: invalid requested mimetype",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"406 status code\", function() {\r",
							"    pm.response.to.have.status(406);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function() {\r",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Invalid requested media type.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true,
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "text/html",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read boat 1: jwt1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function() {\r",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Black Pearl\");\r",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Galleon\");\r",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(165);\r",
							"    pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"user_id1\"));\r",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"]\r",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read a boat: not found",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 status code\", function() {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function() {\r",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Boat not found.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/123",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"123"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update a boat: no JWT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function() {\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function() {\r",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No token.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"I am Hungry\",\r\n    \"type\": \"Pirate ship\",\r\n    \"length\": 200\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update a boat: invalid JWT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function() {\r",
							"    pm.response.to.have.status(401);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "123",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"I am Hungry\",\r\n    \"type\": \"Pirate ship\",\r\n    \"length\": 200\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update a boat: wrong owner",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function() {\r",
							"    pm.response.to.have.status(403);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function() {\r",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Not your boat.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"I am Hungry\",\r\n    \"type\": \"Pirate ship\",\r\n    \"length\": 200\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update a boat: invalid request body",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function() {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function() {\r",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Invalid request body.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": 123\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update a boat: invalid requested mimetype",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"406 status code\", function() {\r",
							"    pm.response.to.have.status(406);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function() {\r",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Invalid requested media type.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "text/html",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"I am Hungry\",\r\n    \"type\": \"Pirate ship\",\r\n    \"length\": 200\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update a boat: jwt1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function() {\r",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"I am Hungry\");\r",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Pirate ship\");\r",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(200);\r",
							"    pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"user_id1\"))\r",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];\r",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"I am Hungry\",\r\n    \"type\": \"Pirate ship\",\r\n    \"length\": 200\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update a boat: not found",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 status code\", function() {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function() {\r",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Boat not found.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"I am Hungry\",\r\n    \"type\": \"Pirate ship\",\r\n    \"length\": 200\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/123",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"123"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update a boat: no JWT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function() {\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function() {\r",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No token.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"I am Hungry\",\r\n    \"type\": \"Pirate ship\",\r\n    \"length\": 200\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update a boat: invalid JWT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function() {\r",
							"    pm.response.to.have.status(401);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "123",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"I am Hungry\",\r\n    \"type\": \"Pirate ship\",\r\n    \"length\": 200\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update a boat: wrong owner",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function() {\r",
							"    pm.response.to.have.status(403);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function() {\r",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Not your boat.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"I am Hungry\",\r\n    \"type\": \"Pirate ship\",\r\n    \"length\": 200\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update a boat: invalid requested mimetype",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"406 status code\", function() {\r",
							"    pm.response.to.have.status(406);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function() {\r",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Invalid requested media type.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Accept",
						"value": "text/html",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"I am Hungry\",\r\n    \"type\": \"Pirate ship\",\r\n    \"length\": 200\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update a boat: invalid data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function() {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function() {\r",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Invalid request body.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"length\": 0\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update a boat: jwt1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function() {\r",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"I am Hungry\");\r",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Pirate ship\");\r",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(165);\r",
							"    pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"user_id1\"))\r",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];\r",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"length\": 165\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update a boat: not found",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 status code\", function() {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function() {\r",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Boat not found.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"I am Hungry\",\r\n    \"type\": \"Pirate ship\",\r\n    \"length\": 200\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/123",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"123"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read a boat: wrong method",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"405 status code\", function () {\r",
							"    pm.response.to.have.status(405);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Request method not allowed.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "COPY",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create an alliance: invalid request body",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function() {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function() {\r",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Invalid request body.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"PIC\": \"ME\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/alliances",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"alliances"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create an alliance: invalid requested mimetype",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"406 status code\", function() {\r",
							"    pm.response.to.have.status(406);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function() {\r",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Invalid requested media type.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "text/html",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"founding_date\": \"2021-06-06\",\r\n    \"PIC\": \"Jack Sparrow\",\r\n    \"capacity\": 10\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/alliances",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"alliances"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create an alliance 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"alliance_id1\", pm.response.json()[\"id\"]);\r",
							"\r",
							"pm.test(\"201 status code\", function() {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function() {\r",
							"    pm.expect(pm.response.json()[\"founding_date\"]).to.eq(\"2021-06-06\");\r",
							"    pm.expect(pm.response.json()[\"PIC\"]).to.eq(\"Jack Sparrow\");\r",
							"    pm.expect(pm.response.json()[\"capacity\"]).to.eq(10);\r",
							"    pm.expect(pm.response.json()[\"#boats\"]).to.eq(0);\r",
							"    pm.expect(pm.response.json()[\"boats\"]).to.be.an('array').that.is.empty;\r",
							"    const self_url = pm.environment.get(\"app_url\") + \"/alliances/\" + pm.response.json()[\"id\"];\r",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"founding_date\": \"2021-06-06\",\r\n    \"PIC\": \"Jack Sparrow\",\r\n    \"capacity\": 10\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/alliances",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"alliances"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create an alliance 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"alliance_id2\", pm.response.json()[\"id\"]);\r",
							"\r",
							"pm.test(\"201 status code\", function() {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function() {\r",
							"    pm.expect(pm.response.json()[\"founding_date\"]).to.eq(\"2021-06-05\");\r",
							"    pm.expect(pm.response.json()[\"PIC\"]).to.eq(\"Jack Sparrow\");\r",
							"    pm.expect(pm.response.json()[\"capacity\"]).to.eq(10);\r",
							"    pm.expect(pm.response.json()[\"#boats\"]).to.eq(0);\r",
							"    pm.expect(pm.response.json()[\"boats\"]).to.be.an('array').that.is.empty;\r",
							"    const self_url = pm.environment.get(\"app_url\") + \"/alliances/\" + pm.response.json()[\"id\"];\r",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"founding_date\": \"2021-06-05\",\r\n    \"PIC\": \"Jack Sparrow\",\r\n    \"capacity\": 10\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/alliances",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"alliances"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create an alliance 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"alliance_id3\", pm.response.json()[\"id\"]);\r",
							"\r",
							"pm.test(\"201 status code\", function() {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function() {\r",
							"    pm.expect(pm.response.json()[\"founding_date\"]).to.eq(\"2021-06-04\");\r",
							"    pm.expect(pm.response.json()[\"PIC\"]).to.eq(\"Jack Sparrow\");\r",
							"    pm.expect(pm.response.json()[\"capacity\"]).to.eq(10);\r",
							"    pm.expect(pm.response.json()[\"#boats\"]).to.eq(0);\r",
							"    pm.expect(pm.response.json()[\"boats\"]).to.be.an('array').that.is.empty;\r",
							"    const self_url = pm.environment.get(\"app_url\") + \"/alliances/\" + pm.response.json()[\"id\"];\r",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"founding_date\": \"2021-06-04\",\r\n    \"PIC\": \"Jack Sparrow\",\r\n    \"capacity\": 10\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/alliances",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"alliances"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create an alliance 4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"alliance_id4\", pm.response.json()[\"id\"]);\r",
							"\r",
							"pm.test(\"201 status code\", function() {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function() {\r",
							"    pm.expect(pm.response.json()[\"founding_date\"]).to.eq(\"2021-06-03\");\r",
							"    pm.expect(pm.response.json()[\"PIC\"]).to.eq(\"Jack Sparrow\");\r",
							"    pm.expect(pm.response.json()[\"capacity\"]).to.eq(10);\r",
							"    pm.expect(pm.response.json()[\"#boats\"]).to.eq(0);\r",
							"    pm.expect(pm.response.json()[\"boats\"]).to.be.an('array').that.is.empty;\r",
							"    const self_url = pm.environment.get(\"app_url\") + \"/alliances/\" + pm.response.json()[\"id\"];\r",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"founding_date\": \"2021-06-03\",\r\n    \"PIC\": \"Jack Sparrow\",\r\n    \"capacity\": 10\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/alliances",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"alliances"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create an alliance 5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"alliance_id5\", pm.response.json()[\"id\"]);\r",
							"\r",
							"pm.test(\"201 status code\", function() {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function() {\r",
							"    pm.expect(pm.response.json()[\"founding_date\"]).to.eq(\"2021-06-02\");\r",
							"    pm.expect(pm.response.json()[\"PIC\"]).to.eq(\"Jack Sparrow\");\r",
							"    pm.expect(pm.response.json()[\"capacity\"]).to.eq(10);\r",
							"    pm.expect(pm.response.json()[\"#boats\"]).to.eq(0);\r",
							"    pm.expect(pm.response.json()[\"boats\"]).to.be.an('array').that.is.empty;\r",
							"    const self_url = pm.environment.get(\"app_url\") + \"/alliances/\" + pm.response.json()[\"id\"];\r",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"founding_date\": \"2021-06-02\",\r\n    \"PIC\": \"Jack Sparrow\",\r\n    \"capacity\": 10\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/alliances",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"alliances"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create an alliance 6",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"alliance_id6\", pm.response.json()[\"id\"]);\r",
							"\r",
							"pm.test(\"201 status code\", function() {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function() {\r",
							"    pm.expect(pm.response.json()[\"founding_date\"]).to.eq(\"2021-06-01\");\r",
							"    pm.expect(pm.response.json()[\"PIC\"]).to.eq(\"Jack Sparrow\");\r",
							"    pm.expect(pm.response.json()[\"capacity\"]).to.eq(10);\r",
							"    pm.expect(pm.response.json()[\"#boats\"]).to.eq(0);\r",
							"    pm.expect(pm.response.json()[\"boats\"]).to.be.an('array').that.is.empty;\r",
							"    const self_url = pm.environment.get(\"app_url\") + \"/alliances/\" + pm.response.json()[\"id\"];\r",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"founding_date\": \"2021-06-01\",\r\n    \"PIC\": \"Jack Sparrow\",\r\n    \"capacity\": 10\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/alliances",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"alliances"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read alliances: invalid requested mimetype",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"406 status code\", function() {\r",
							"    pm.response.to.have.status(406);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function() {\r",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Invalid requested media type.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "text/html",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/alliances",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"alliances"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read alliances: 1st page",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function() {\r",
							"    pm.expect(pm.response.json()[\"alliances\"].length).to.eq(5);\r",
							"    pm.expect(pm.response.json()[\"total_number\"]).to.eq(6);\r",
							"});\r",
							"\r",
							"pm.test(\"next property exists\", function () {\r",
							"    pm.expect(pm.response.json()[\"next\"]).is.not.oneOf([null, undefined]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/alliances",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"alliances"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read alliances: 2nd page",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function() {\r",
							"    pm.expect(pm.response.json()[\"alliances\"].length).to.eq(1);\r",
							"    pm.expect(pm.response.json()[\"total_number\"]).to.eq(6);\r",
							"});\r",
							"\r",
							"pm.test(\"next property not exist\", function () {\r",
							"    pm.expect(pm.response.json()[\"next\"]).is.oneOf([null, undefined]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/alliances?limit=5&offset=5",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"alliances"
					],
					"query": [
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "offset",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create an alliance: wrong method",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"405 status code\", function () {\r",
							"    pm.response.to.have.status(405);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Request method not allowed.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"founding_date\": \"2021-06-06\",\r\n    \"PIC\": \"Jack Sparrow\",\r\n    \"capacity\": 10\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/alliances",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"alliances"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read alliance 1: invalid requested mimetype",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"406 status code\", function() {\r",
							"    pm.response.to.have.status(406);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function() {\r",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Invalid requested media type.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true,
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "text/html",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/alliances/{{alliance_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"alliances",
						"{{alliance_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read alliance 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function() {\r",
							"    pm.expect(pm.response.json()[\"founding_date\"]).to.eq(\"2021-06-06\");\r",
							"    pm.expect(pm.response.json()[\"PIC\"]).to.eq(\"Jack Sparrow\");\r",
							"    pm.expect(pm.response.json()[\"capacity\"]).to.eq(10);\r",
							"    pm.expect(pm.response.json()[\"#boats\"]).to.eq(0);\r",
							"    pm.expect(pm.response.json()[\"boats\"]).to.be.an('array').that.is.empty;\r",
							"    const self_url = pm.environment.get(\"app_url\") + \"/alliances/\" + pm.response.json()[\"id\"];\r",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/alliances/{{alliance_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"alliances",
						"{{alliance_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read an alliance: not found",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 status code\", function() {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function() {\r",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Alliance not found.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/alliances/123",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"alliances",
						"123"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update an alliance: invalid request body",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function() {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function() {\r",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Invalid request body.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": 123\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/alliances/{{alliance_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"alliances",
						"{{alliance_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update an alliance: invalid requested mimetype",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"406 status code\", function() {\r",
							"    pm.response.to.have.status(406);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function() {\r",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Invalid requested media type.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "text/html",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"PIC\": \"John Sparrow\",\r\n    \"capacity\": 10\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/alliances/{{alliance_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"alliances",
						"{{alliance_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update an alliance",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function() {\r",
							"    pm.expect(pm.response.json()[\"founding_date\"]).to.eq(\"2021-06-06\");\r",
							"    pm.expect(pm.response.json()[\"PIC\"]).to.eq(\"John Sparrow\");\r",
							"    pm.expect(pm.response.json()[\"capacity\"]).to.eq(10);\r",
							"    pm.expect(pm.response.json()[\"#boats\"]).to.eq(0);\r",
							"    pm.expect(pm.response.json()[\"boats\"]).to.be.an('array').that.is.empty;\r",
							"    const self_url = pm.environment.get(\"app_url\") + \"/alliances/\" + pm.response.json()[\"id\"];\r",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"PIC\": \"John Sparrow\",\r\n    \"capacity\": 10\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/alliances/{{alliance_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"alliances",
						"{{alliance_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update an alliance: not found",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 status code\", function() {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function() {\r",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Alliance not found.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"PIC\": \"John Sparrow\",\r\n    \"capacity\": 10\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/alliances/123",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"alliances",
						"123"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update an alliance: invalid requested mimetype",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"406 status code\", function() {\r",
							"    pm.response.to.have.status(406);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function() {\r",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Invalid requested media type.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Accept",
						"value": "text/html",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"PIC\": \"Jack Sparrow\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/alliances/{{alliance_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"alliances",
						"{{alliance_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update an alliance",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function() {\r",
							"    pm.expect(pm.response.json()[\"founding_date\"]).to.eq(\"2021-06-06\");\r",
							"    pm.expect(pm.response.json()[\"PIC\"]).to.eq(\"Jack Sparrow\");\r",
							"    pm.expect(pm.response.json()[\"capacity\"]).to.eq(10);\r",
							"    pm.expect(pm.response.json()[\"#boats\"]).to.eq(0);\r",
							"    pm.expect(pm.response.json()[\"boats\"]).to.be.an('array').that.is.empty;\r",
							"    const self_url = pm.environment.get(\"app_url\") + \"/alliances/\" + pm.response.json()[\"id\"];\r",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"PIC\": \"Jack Sparrow\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/alliances/{{alliance_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"alliances",
						"{{alliance_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update an alliance: not found",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 status code\", function() {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function() {\r",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Alliance not found.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"PIC\": \"Jack Sparrow\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/alliances/123",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"alliances",
						"123"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read an alliance: wrong method",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"405 status code\", function () {\r",
							"    pm.response.to.have.status(405);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Request method not allowed.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "COPY",
				"header": [],
				"url": {
					"raw": "{{app_url}}/alliances/{{alliance_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"alliances",
						"{{alliance_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add relationship: no JWT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function() {\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function() {\r",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No token.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/alliances/{{alliance_id1}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"alliances",
						"{{alliance_id1}}",
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add relationship: invalid JWT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function() {\r",
							"    pm.response.to.have.status(401);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "123",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/alliances/{{alliance_id1}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"alliances",
						"{{alliance_id1}}",
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add relationship: wrong owner",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function() {\r",
							"    pm.response.to.have.status(403);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function() {\r",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Not your boat.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/alliances/{{alliance_id1}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"alliances",
						"{{alliance_id1}}",
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add relationship: not found",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 status code\", function() {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function() {\r",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Alliance/boat not found.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/alliances/456/boats/123",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"alliances",
						"456",
						"boats",
						"123"
					]
				}
			},
			"response": []
		},
		{
			"name": "Before add relationship: boat",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"alliance is empty\", function() {\r",
							"    pm.expect(pm.response.json()[\"alliance\"]).is.oneOf([null, undefined]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Before add relationship: alliance",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/alliances/{{alliance_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"alliances",
						"{{alliance_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add relationship: alliance1 & boat1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function() {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.sendRequest({\r",
							"    url: pm.environment.get(\"app_url\") + \"/alliances/\" + pm.environment.get(\"alliance_id1\"),\r",
							"    method: \"GET\"\r",
							"}, function (err, res) {\r",
							"    if (err) {\r",
							"        console.log(err);\r",
							"    } else {\r",
							"        pm.environment.set(\"prev_#boats\", res.json()[\"#boats\"]);\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/alliances/{{alliance_id1}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"alliances",
						"{{alliance_id1}}",
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "After add relationship: boat",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"alliance is correctly assigned\", function() {\r",
							"    pm.expect(pm.response.json()[\"alliance\"]).to.eq(pm.environment.get(\"alliance_id1\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "After add relationship: alliance",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"boat joined this alliance\", function() {\r",
							"    pm.expect(pm.response.json()[\"#boats\"]).to.eq(pm.environment.get(\"prev_#boats\") + 1);\r",
							"    pm.expect(pm.response.json()[\"boats\"]).to.include(pm.environment.get(\"boat_id1\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/alliances/{{alliance_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"alliances",
						"{{alliance_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add relationship: alliance1 & boat2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function() {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.sendRequest({\r",
							"    url: pm.environment.get(\"app_url\") + \"/alliances/\" + pm.environment.get(\"alliance_id1\"),\r",
							"    method: \"GET\"\r",
							"}, function (err, res) {\r",
							"    if (err) {\r",
							"        console.log(err);\r",
							"    } else {\r",
							"        pm.environment.set(\"prev_#boats\", res.json()[\"#boats\"]);\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/alliances/{{alliance_id1}}/boats/{{boat_id2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"alliances",
						"{{alliance_id1}}",
						"boats",
						"{{boat_id2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add relationship: alliance already exists",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function() {\r",
							"    pm.response.to.have.status(403);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function() {\r",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Boat has an alliance already.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/alliances/{{alliance_id2}}/boats/{{boat_id2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"alliances",
						"{{alliance_id2}}",
						"boats",
						"{{boat_id2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update an alliance: invalid data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function() {\r",
							"    pm.response.to.have.status(403);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function() {\r",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Capacity < current #boats.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"PIC\": \"John Sparrow\",\r\n    \"capacity\": 1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/alliances/{{alliance_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"alliances",
						"{{alliance_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update an alliance: invalid data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function() {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function() {\r",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Invalid request body.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"capacity\": 0\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/alliances/{{alliance_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"alliances",
						"{{alliance_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update an alliance: capacity 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function() {\r",
							"    pm.expect(pm.response.json()[\"capacity\"]).to.eq(2);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"capacity\": 2\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/alliances/{{alliance_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"alliances",
						"{{alliance_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add relationship: no capacity",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function() {\r",
							"    pm.response.to.have.status(403);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function() {\r",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Alliance is full.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/alliances/{{alliance_id1}}/boats/{{boat_id3}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"alliances",
						"{{alliance_id1}}",
						"boats",
						"{{boat_id3}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete relationship: not found",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 status code\", function() {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function() {\r",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Alliance/boat not found.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/alliances/123/boats/456",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"alliances",
						"123",
						"boats",
						"456"
					]
				}
			},
			"response": []
		},
		{
			"name": "Before del relationship: boat",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"alliance is not null\", function() {\r",
							"    pm.expect(pm.response.json()[\"alliance\"]).is.not.oneOf([null, undefined]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Before del relationship: alliance",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/alliances/{{alliance_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"alliances",
						"{{alliance_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete relationship: alliance1 & boat2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function() {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.sendRequest({\r",
							"    url: pm.environment.get(\"app_url\") + \"/alliances/\" + pm.environment.get(\"alliance_id1\"),\r",
							"    method: \"GET\"\r",
							"}, function (err, res) {\r",
							"    if (err) {\r",
							"        console.log(err);\r",
							"    } else {\r",
							"        pm.environment.set(\"prev_#boats\", res.json()[\"#boats\"]);\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/alliances/{{alliance_id1}}/boats/{{boat_id2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"alliances",
						"{{alliance_id1}}",
						"boats",
						"{{boat_id2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "After del relationship: boat",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"alliance is not null\", function() {\r",
							"    pm.expect(pm.response.json()[\"alliance\"]).is.oneOf([null, undefined]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "After del relationship: alliance",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"boat left this alliance\", function() {\r",
							"    pm.expect(pm.response.json()[\"#boats\"]).to.eq(pm.environment.get(\"prev_#boats\") - 1);\r",
							"    pm.expect(pm.response.json()[\"boats\"]).to.not.include(pm.environment.get(\"boat_id2\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/alliances/{{alliance_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"alliances",
						"{{alliance_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete alliance1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/alliances/{{alliance_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"alliances",
						"{{alliance_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check relationship after del alliance",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"alliance is removed\", function() {\r",
							"    pm.expect(pm.response.json()[\"alliance\"]).is.oneOf([null, undefined]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete alliance2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/alliances/{{alliance_id2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"alliances",
						"{{alliance_id2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete alliance3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/alliances/{{alliance_id3}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"alliances",
						"{{alliance_id3}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete alliance4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/alliances/{{alliance_id4}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"alliances",
						"{{alliance_id4}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete alliance5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/alliances/{{alliance_id5}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"alliances",
						"{{alliance_id5}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete an alliance: not found",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 status code\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function() {\r",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Alliance not found.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/alliances/{{alliance_id5}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"alliances",
						"{{alliance_id5}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete a boat: no JWT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function() {\r",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No token.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete a boat: invalid JWT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "123",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete a boat: wrong owner",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {\r",
							"    pm.response.to.have.status(403);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function() {\r",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Not your boat.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete boat001: jwt2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id001}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id001}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete boat1: jwt1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete boat2: jwt1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete boat3: jwt1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id3}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id3}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete boat4: jwt1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id4}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id4}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete boat5: jwt1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id5}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id5}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add relationship: alliance6 & boat6",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function() {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/alliances/{{alliance_id6}}/boats/{{boat_id6}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"alliances",
						"{{alliance_id6}}",
						"boats",
						"{{boat_id6}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check alliance6",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"boat6 joined alliance6\", function() {\r",
							"    pm.expect(pm.response.json()[\"#boats\"]).to.eq(1);\r",
							"    pm.expect(pm.response.json()[\"boats\"]).include(pm.environment.get(\"boat_id6\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/alliances/{{alliance_id6}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"alliances",
						"{{alliance_id6}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete boat6: jwt1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id6}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id6}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete a boat: not found",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 status code\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function() {\r",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Boat not found.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id6}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id6}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check relationship after del boat",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"alliance is empty\", function() {\r",
							"    pm.expect(pm.response.json()[\"#boats\"]).to.eq(0);\r",
							"    pm.expect(pm.response.json()[\"boats\"]).not.include(pm.environment.get(\"boat_id6\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/alliances/{{alliance_id6}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"alliances",
						"{{alliance_id6}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete alliance6",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/alliances/{{alliance_id6}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"alliances",
						"{{alliance_id6}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{jwt1}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}